/**************************************************************************	ADOBE SYSTEMS INCORPORATED	 Copyright 2008 Adobe Systems Incorporated	 All Rights Reserved.	NOTICE:  Adobe permits you to use, modify, and distribute this file	in accordance with the terms of the Adobe license agreement accompanying	it.  If you have received this file from a source other than Adobe, then	your use, modification, or distribution of it requires the prior written	permission of Adobe.**************************************************************************//**	Name: ShortcutButtons.jsx	@author John Huan Vu, Photoshop Engineering Intern, Adobe Systems Incorporated	@fileoverview The script contains two functions to add a new			document and to close the foremost document in			Adobe Photoshop. This script is to be used by			a SWF file called ShortcutButtons.swf created			through Adobe Flex.*/#target photoshopvar fillColor = new SolidColor();function DrawBox(w, h, x, y, lt, rt, lb, rb, c , o){	var xPos = 0;	var yPos = 0;	var __w = parseInt(w);	var __h = parseInt(h);		var __lt = parseInt(lt);	var __rt = parseInt(rt);	var __lb = parseInt(lb);	var __rb = parseInt(rb);		var __r = parseInt(c.substring(0,2), 16);    var __g = parseInt(c.substring(2,4), 16);    var __b = parseInt(c.substring(4,6), 16);	var __o = parseInt(o);		fillColor.rgb.red  = __r;	fillColor.rgb.green = __g;	fillColor.rgb.blue = __b;	if (x == "0")	{		xPos = Math.round((doc.width.as('px') - __w) / 2);	}	else	{		xPos = parseInt(x);	}	if (y == "0")	{		yPos = Math.round((doc.height.as('px') - __h) / 2);	}	else	{		yPos = parseInt(y);	}		if (__lt != 0 || __rt != 0 || __lb != 0 || __rb != 0)	{			var lineArray = new Array();				lineArray[0] = new PathPointInfo;		lineArray[0].kind = PointKind.CORNERPOINT;		lineArray[0].anchor = Array(xPos + __lt,yPos);		lineArray[0].leftDirection = lineArray[0].anchor;		lineArray[0].rightDirection = Array(xPos + (__lt/2), yPos);				lineArray[1] = new PathPointInfo;		lineArray[1].kind = PointKind.SMOOTHPOINT;		lineArray[1].anchor = Array(xPos + __w - __rt, yPos);		lineArray[1].leftDirection = Array(xPos + __w - (__rt/2), yPos);		lineArray[1].rightDirection = lineArray[1].anchor;				lineArray[2] = new PathPointInfo;		lineArray[2].kind = PointKind.SMOOTHPOINT;		lineArray[2].anchor = Array(xPos + __w, yPos + __rt);		lineArray[2].leftDirection = lineArray[2].anchor;		lineArray[2].rightDirection = Array(xPos + __w, yPos + (__rt/2));				lineArray[3] = new PathPointInfo;		lineArray[3].kind = PointKind.SMOOTHPOINT;		lineArray[3].anchor = Array(xPos + __w, yPos + __h - __rb);		lineArray[3].leftDirection = Array(xPos + __w, yPos + __h - (__rb/2));		lineArray[3].rightDirection = lineArray[3].anchor;				lineArray[4] = new PathPointInfo;		lineArray[4].kind = PointKind.SMOOTHPOINT;		lineArray[4].anchor = Array(xPos + __w - __rb, yPos + __h);		lineArray[4].leftDirection = lineArray[4].anchor;		lineArray[4].rightDirection = Array(xPos + __w - (__rb/2), yPos + __h);				lineArray[5] = new PathPointInfo;		lineArray[5].kind = PointKind.SMOOTHPOINT;		lineArray[5].anchor = Array(xPos + __lb, yPos + __h);		lineArray[5].leftDirection = Array(xPos + (__lb/2), yPos + __h);		lineArray[5].rightDirection = lineArray[5].anchor;				lineArray[6] = new PathPointInfo;		lineArray[6].kind = PointKind.SMOOTHPOINT;		lineArray[6].anchor = Array(xPos, yPos + __h - __lb);		lineArray[6].leftDirection = lineArray[6].anchor;		lineArray[6].rightDirection = Array(xPos, yPos + __h - (__lb/2));				lineArray[7] = new PathPointInfo;		lineArray[7].kind = PointKind.SMOOTHPOINT;		lineArray[7].anchor = Array(xPos, yPos + __lt);		lineArray[7].leftDirection = Array(xPos, yPos + (__lt/2));		lineArray[7].rightDirection = lineArray[7].anchor;				var lineSubPathArray = new Array();		lineSubPathArray[0] = new SubPathInfo();		lineSubPathArray[0].operation = ShapeOperation.SHAPEADD;		lineSubPathArray[0].closed = true;		lineSubPathArray[0].entireSubPath = lineArray;						var myPathItem = doc.pathItems.add("A Line", lineSubPathArray);				var layerTypeRef = new ActionReference();        layerTypeRef.putClass( stringIDToTypeID( "contentLayer" )  );        var newFillLayer = new ActionDescriptor();        newFillLayer.putReference( charIDToTypeID( "null" ) , layerTypeRef );        var colorValues = new ActionDescriptor();		colorValues.putDouble( charIDToTypeID( "Rd  " ) , __r );		colorValues.putDouble( charIDToTypeID( "Grn " ) , __g );		colorValues.putDouble( charIDToTypeID( "Bl  " ) , __b );        var rgbColor = new ActionDescriptor();        rgbColor.putObject( charIDToTypeID( "Clr " ) , charIDToTypeID( "RGBC" ) , colorValues );        var fillType = new ActionDescriptor();        fillType.putObject( charIDToTypeID( "Type" ) , stringIDToTypeID( "solidColorLayer" ) , rgbColor );        newFillLayer.putObject( charIDToTypeID( "Usng" ) , stringIDToTypeID( "contentLayer" ) , fillType );        executeAction( charIDToTypeID( "Mk  " ) , newFillLayer, DialogModes.NO );				doc.activeLayer.opacity = __o;				myPathItem.remove();			}	else	{		var box = doc.artLayers.add("Box");		doc.selection.select([[xPos,yPos],[xPos + __w,yPos],[xPos + __w,yPos + __h],[xPos,yPos + __h]]);		doc.selection.fill(fillColor, ColorBlendMode.NORMAL, 100, false);		doc.selection.deselect();		doc.activeLayer.opacity = __o;		doc.activeLayer = box;		box.transparentPixelsLocked = true;	}	}