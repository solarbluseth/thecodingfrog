<?xml version="1.0" encoding="utf-8"?>
<!--
*************************************************************************
	ADOBE SYSTEMS INCORPORATED
	 Copyright 2008 Adobe Systems Incorporated
	 All Rights Reserved.

	NOTICE:  Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the Adobe license agreement accompanying
	it.  If you have received this file from a source other than Adobe, then
	your use, modification, or distribution of it requires the prior written
	permission of Adobe.
**************************************************************************

	Name:			Boxes.mxml
	Author:			xxxxx
	Description:	xxxxx
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="200" height="320" creationComplete="init()" horizontalAlign="left" borderColor="#D1D1D1" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#D6D6D6, #D1D1D1]">
		<mx:Script>
		<![CDATA[
			import com.adobe.csxs.types.SyncRequestResult;
			import flash.events.MouseEvent;
			import mx.events.FlexEvent;
			import flash.events.KeyboardEvent;
			import mx.controls.Alert;
			import com.adobe.csxs.core.CSXSInterface;
			import com.adobe.csxs.types.*;
			import com.adobe.csxs.events.*;
			import com.adobe.csxs.external.*;
			import com.adobe.csxs.external.resources.*;
			import mx.events.ColorPickerEvent;
			import mx.events.SliderEvent;
			import mx.events.NumericStepperEvent;
			//import flash.net.navigateToURL;
			//import flash.net.URLRequest;
			
			import mx.core.BitmapAsset;
			[Embed(source="lock.png")]
            [Bindable]
			public var __lock:Class;
			
			[Embed(source="lt.png")]
            [Bindable]
			public var __lt:Class;
			
			[Embed(source="rt.png")]
            [Bindable]
			public var __rt:Class;
			
			[Embed(source="lb.png")]
            [Bindable]
			public var __lb:Class;
			
			[Embed(source="rb.png")]
            [Bindable]
			public var __rb:Class;
			
			[Embed(source="r.png")]
            [Bindable]
			public var __r:Class;
			
			private var isWidthOk:Boolean = false;
			private var isHeightOk:Boolean = false;
			private var __width:int = 0;
			private var __height:int = 0;
			private var __x:String = "";
			private var __y:String = "";
			private var __opacity:int = 100;
			private var xmlMenu:XML = XML(<Menu><MenuItem Id="item_1" Label="Made by Jean-Louis PERSAT / @TheCodingFrog"/></Menu>);
			private var __appVersion:String = "12";
			private var __photoshopCS4Version:String = "11";
			
			private var __color:String = "000000";
			private var __relative:int = 1;
			
			public function init():void
			{
				imgLock.source = __lock;
				imgLT.source = __lt;
				imgRT.source = __rt;
				imgLB.source = __lb;
				imgRB.source = __rb;
				imgRelative.source = __r;
				
				var __result:SyncRequestResult;
				__result = CSXSInterface.getInstance().getHostEnvironment();
				var __hostData:HostEnvironment;
				var __skinInfo:AppSkinInfo;
				var __defaultColor:String;
				if(SyncRequestResult.COMPLETE == __result.status && __result.data)
				{
					__hostData = __result.data as HostEnvironment;
					__skinInfo = __hostData.appSkinInfo;
					__defaultColor = __skinInfo.panelBackgroundColor.color.rgb;
					this.setStyle("fontFamily", __skinInfo.baseFontFamily);
					this.setStyle("fontSize", __skinInfo.baseFontSize);
					this.setStyle("backgroundGradientColors", [__defaultColor, __defaultColor]);
					__appVersion = __hostData.appVersion.split(".")[0];
				}
                
				CSXSInterface.instance.evalScript("PhotoshopPersistent");
				
				var windowGeoData:WindowGeometry = new WindowGeometry(0, 0, 199, 310); 
				CSXSInterface.instance.requestStateChange(StateChangeEvent.WINDOW_RESIZE, windowGeoData);
				this.visible = false;
				
				//getPSVersion();
				CSXSInterface.getInstance().setPanelMenu(xmlMenu);
				CSXSInterface.getInstance().addEventListener(MenuClickEvent.FLYOUT_MENU_CLICK, menuClickHandler);
				CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", charToInteger("Exch").toString());
				CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", charToInteger("Rset").toString());
				CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", charToInteger("setd").toString());
				CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", charToInteger("Opn ").toString());
                CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", charToInteger("Mk  ").toString());
				CSXSInterface.instance.evalScript("PhotoshopRegisterEvent", charToInteger("Cls ").toString());
				
				if (__appVersion == __photoshopCS4Version)
                {
                    ExternalInterface.addCallback("PhotoshopCallback", PhotoshopCallback);
                }
                else
                {
                	ExternalInterface.addCallback("PhotoshopCallback" + CSXSInterface.instance.getExtensionId(), PhotoshopCallback);
                }
				
				getColor();
				
				boxHeight.addEventListener(KeyboardEvent.KEY_UP, checkHeight);
				//boxHeight.text = readPref("boxHeight");
				//boxHeight.dispatchEvent(new KeyboardEvent(KeyboardEvent.KEY_UP));
  
				boxWidth.addEventListener(KeyboardEvent.KEY_UP, checkWidth);
				//boxWidth.text = readPref("boxWidth");
				//boxWidth.dispatchEvent(new KeyboardEvent(KeyboardEvent.KEY_UP));
				
				boxXPos.addEventListener(KeyboardEvent.KEY_UP, checkXPos);
				/* if (readPref("boxXPos") != "-1")
				{
					boxXPos.text = readPref("boxXPos");
					__x = int(boxXPos.text);
				}
				else
				{
					boxXPos.text = "";
				} */
				
				boxYPos.addEventListener(KeyboardEvent.KEY_UP, checkYPos);
				/* if (readPref("boxYPos") != "-1")
				{
					boxYPos.text = readPref("boxYPos");
					__x = int(boxYPos.text);
				}
				else
				{
					boxYPos.text = "";
				} */
				
				boxRelative.addEventListener(MouseEvent.CLICK, relative);
				
				boxColor.addEventListener(ColorPickerEvent.CHANGE, setColor);
				
				boxIOpacity.addEventListener(KeyboardEvent.KEY_UP, checkKOpacity);
				boxIOpacity.addEventListener(NumericStepperEvent.CHANGE, checkOpacity);
				boxOpacity.addEventListener(SliderEvent.CHANGE, slide);
				/* if (readPref("boxOpacity") != "")
				{
					__opacity = Number(readPref("boxOpacity"));
					boxOpacity.value = Number(readPref("boxOpacity"));
				}
				else
				{
					boxOpacity.value = 100;
				} */
				
				/* boxLTCorner.value = Number(readPref("boxLTCorner"));
				boxRTCorner.value = Number(readPref("boxRTCorner"));
				boxLBCorner.value = Number(readPref("boxLBCorner"));
				boxRBCorner.value = Number(readPref("boxRBCorner")); */
				boxLTCorner.addEventListener(KeyboardEvent.KEY_UP, changeKLT);
				boxLTCorner.addEventListener(NumericStepperEvent.CHANGE, changeLT);
				boxRTCorner.addEventListener(NumericStepperEvent.CHANGE, changeNS);
				boxLBCorner.addEventListener(NumericStepperEvent.CHANGE, changeNS);
				boxRBCorner.addEventListener(NumericStepperEvent.CHANGE, changeNS);
				
				boxLockCorners.addEventListener(MouseEvent.CLICK, lockCorners);
				//boxLockCorners.selected = Boolean(readPref("boxLockCorners"));
				//lockCorners(new MouseEvent(MouseEvent.CLICK));
				
				boxOpacity.value = __opacity;
				boxIOpacity.value = __opacity;
				boxOpacity.showDataTip = false;
				
				imgRelative.toolTip = "Relative to beneath path"
				imgLock.toolTip = "All corners to same radius"
				
				checkDoc();
			}
			
			private function readPref(__key:String):String
			{
				var __val:String = "";
				var __result:SyncRequestResult = CSXSInterface.instance.retrievePreference(__key);
				if(SyncRequestResult.COMPLETE == __result.status && __result.data)
			  	{
					__val = __result.data as String;
			  	}
			  	return __val;
			}
			
			private function relative(e:MouseEvent):void
			{
				if (boxRelative.selected)
				{
					__relative = 1;
				}
				else
				{
					__relative = 0;
				}
			}
			
			private function getColor():void
			{
				var res:SyncRequestResult = CSXSInterface.instance.evalScript("getColor");
				if (res.status == SyncRequestResult.COMPLETE && res.data)
				{
					var __coul:String = res.data.foregroundColor;
					//boxYPos.text = __coul;
					//boxColor.colorField = "0x" + __coul;
					boxColor.selectedColor = uint("0x" + __coul);
					__color = __coul;
				}
			}
			
			/* public function getPSVersion():void
	        {
	            var _loc_2:String = null;
	            var _loc_3:Array = null;
	            var _loc_1:* = CSXSInterface.instance.evalScript("getVersion");
	            if (SyncRequestResult.COMPLETE == _loc_1.status)
	            {
	                _loc_2 = _loc_1.data.version;
	                _loc_3 = _loc_2.split(".");
	                if (_loc_3.length >= 1)
	                {
	                    hostMajorVersion = Number(_loc_3[0]);
	                }
	                if (_loc_3.length >= 2)
	                {
	                    hostMinorVersion = Number(_loc_3[1]);
	                }
	                if (_loc_3.length >= 3)
	                {
	                    hostFixVersion = Number(_loc_3[2]);
	                }
	            }
	            return;
	        } */
			
			public function PhotoshopCallback(param1:Number, param2:Number):void
	        {
	        	//Alert.show("> " + param1 + ":" + charToInteger("Cls "), "boo",Alert.YES|Alert.NO, this);
	            if (param1 == charToInteger("Exch"))
	            {
	                getColor();
	            }
	            if (param1 == charToInteger("Rset"))
	            {
	                getColor();
	            }
	            if (param1 == charToInteger("setd"))
	            {
	                getColor();
	            }
	            if (param1 == charToInteger("Opn "))
	            {
	                checkDoc();
	            }
	            if (param1 == charToInteger("Mk  "))
	            {
	                checkDoc();
	            }
	            if (param1 == charToInteger("Cls "))
	            {
	            	checkDoc();
	            }
	        }
	        
	        private function checkDoc():void
	        {
	        	//Alert.show("checkDoc", "Test",Alert.YES, this);
	        	try
	        	{
		        	var __res:SyncRequestResult = CSXSInterface.instance.evalScript("hasOpenedDoc");
					//Alert.show("ok", "Test",Alert.YES, this);
					if (__res.status == SyncRequestResult.COMPLETE && __res.data)
					{
						var __hasDoc:String = __res.data.exists;
						if (__hasDoc == "true")
							Application.application.visible = true;
						else
							Application.application.visible = false;
					}
					else
					{
						//Alert.show(__res.status.toString(), "Test",Alert.YES, this);
					}
	        	}
	        	catch (e:Error)
	        	{
	        		//Alert.show(e.message, "Error",Alert.YES, this);
	        	}
	        }
			
			private function charToInteger(val:String):Number
	        {
	            var __int:Number = NaN;
	            __int = val.charCodeAt(0) << 24;
	            __int = __int + (val.charCodeAt(1) << 16);
	            __int = __int + (val.charCodeAt(2) << 8);
	            __int = __int + val.charCodeAt(3);
	            return __int;
	        }
	        
			private function menuClickHandler(e:MenuClickEvent):void
		  	{
				switch (e.menuId) //you can also use the menuId
				{
					case "item_1":
						//var res:SyncRequestResult = CSXSInterface.instance.launchBrowser("http://twitter.com/TheCodingFrog");
				 		navigateToURL(new URLRequest("http://twitter.com/TheCodingFrog"));
				 		break;
				 	default:
				 		//trace("clicked " + event.menuName);
				}
		   }
			
			private function changeKLT(e:KeyboardEvent):void
			{
				boxLTCorner.dispatchEvent(new NumericStepperEvent(NumericStepperEvent.CHANGE));
			}
			
			private function changeLT(e:NumericStepperEvent):void
			{
				if (boxLockCorners.selected)
				{
					boxRTCorner.value = boxLTCorner.value;
					boxRBCorner.value = boxLTCorner.value;
					boxLBCorner.value = boxLTCorner.value;
				}
				storePreference();
			}
			
			private function changeNS(e:NumericStepperEvent):void
			{
				storePreference();
			}
			
			private function storePreference():void
			{				
				/* CSXSInterface.instance.storePreference("boxWidth", __width.toString());
				CSXSInterface.instance.storePreference("boxHeight", __height.toString());
				CSXSInterface.instance.storePreference("boxXPos", __x.toString());
				CSXSInterface.instance.storePreference("boxYPos", __y.toString());
				CSXSInterface.instance.storePreference("boxOpacity", __opacity.toString());
				
				CSXSInterface.instance.storePreference("boxLockCorners", boxLockCorners.selected.toString());
				CSXSInterface.instance.storePreference("boxLTCorner", boxLTCorner.value.toString());
				CSXSInterface.instance.storePreference("boxRTCorner", boxRTCorner.value.toString());
				CSXSInterface.instance.storePreference("boxRBCorner", boxRBCorner.value.toString());
				CSXSInterface.instance.storePreference("boxLBCorner", boxLBCorner.value.toString()); */
			}
			
			private function lockCorners(e:MouseEvent):void
			{
				if (boxLockCorners.selected)
				{
					boxRTCorner.value = boxLTCorner.value;
					boxRTCorner.enabled = false;
					boxRBCorner.value = boxLTCorner.value;
					boxRBCorner.enabled = false;
					boxLBCorner.value = boxLTCorner.value;
					boxLBCorner.enabled = false;
					storePreference();
				}
				else
				{
					boxRTCorner.enabled = true;
					boxRBCorner.enabled = true;
					boxLBCorner.enabled = true;
				}
				
			}
			
			private function setColor(e:ColorPickerEvent):void
			{
				var __col:String = e.currentTarget.selectedColor.toString(16);
				var temp_color:String = "";
				
				if (__col.length < 6)
				{
					var __zero:int = 6 - __col.length;
					for (var i:int = 0; i < __zero; i++)
					{
						temp_color += "0";
	                }
					temp_color += __col;
					__col = temp_color 
				}
				__color = __col;
			}
			
			private function slide(e:SliderEvent):void
			{
				boxIOpacity.value = e.currentTarget.value;
				__opacity = e.currentTarget.value;
				storePreference();
			}
			
			private function checkKOpacity(e:KeyboardEvent):void
			{
				boxIOpacity.dispatchEvent(new NumericStepperEvent(NumericStepperEvent.CHANGE));
			}
			
			private function checkOpacity(e:NumericStepperEvent):void
			{
				__opacity = e.currentTarget.value;
				boxOpacity.value = __opacity;
				//Alert.show(__x.toString(), "Test",Alert.YES, this);
				storePreference();
			}
			
			private function checkXPos(e:KeyboardEvent):void
			{
				if (!isNaN(e.currentTarget.text) && e.currentTarget.text.length > 0)
				{
					__x = e.currentTarget.text;
				}
				else
				{
					__x = "";
				}
				//Alert.show(__x.toString(), "Test",Alert.YES, this);
				storePreference();
			}
			
			private function checkYPos(e:KeyboardEvent):void
			{
				if (!isNaN(e.currentTarget.text) && e.currentTarget.text.length > 0)
				{
					__y = e.currentTarget.text;
				}
				else
				{
					__y = "";
				}
				//Alert.show(__y.toString(), "Test",Alert.YES, this);
				storePreference();
			}
			
			private function checkWidth(e:KeyboardEvent):void
			{
				if (!isNaN(e.currentTarget.text))
				{
					if (Math.ceil(e.currentTarget.text) > 0)
					{
						isWidthOk = true;
						__width = Math.ceil(e.currentTarget.text);
						if (isHeightOk)
						{
							enableButton();
						}
						else
							disableButton();
					}
					else
					{
						__width = 0;
						disableButton();
					}
				}
				else
				{
					e.currentTarget.text = "";
					__width = 0;
					disableButton();
				}
				storePreference();
			}
			
			private function checkHeight(e:KeyboardEvent):void
			{
				if (!isNaN(e.currentTarget.text))
				{
					if (Math.ceil(e.currentTarget.text) > 0)
					{
						isHeightOk = true;
						__height = Math.ceil(e.currentTarget.text);
						if (isWidthOk)
						{
							enableButton();
						}
						else
							disableButton();
					}
					else
					{
						__height = 0;
						disableButton();
					}
				}
				else
				{
					e.currentTarget.text = "";
					__height = 0;
					disableButton();
				}
				storePreference();
			}
			
			private function enableButton():void
			{
				BtnCreateBox.enabled = true;
				BtnCreateBox.addEventListener(MouseEvent.CLICK, doDrawBox);
			}
			
			private function disableButton():void
			{
				BtnCreateBox.enabled = false;
				BtnCreateBox.removeEventListener(MouseEvent.CLICK, doDrawBox);
			}
			
			private function doDrawBox(e:MouseEvent):void
			{
				CSXSInterface.instance.evalScript("DrawBox", __width.toString(), __height.toString(), __x, __y, __relative.toString(), boxLTCorner.value.toString(), boxRTCorner.value.toString(), boxLBCorner.value.toString(), boxRBCorner.value.toString(), __color, __opacity.toString());
			}

			
		]]>
	</mx:Script>
	<mx:Label text="Width" x="14" y="12" color="#000000"/>
	<mx:TextInput width="50" id="boxWidth" x="14" y="28" borderStyle="solid" cornerRadius="5" alpha="1.0" borderThickness="0" styleName="champ"/>
	<mx:Label text="x" x="68" y="30" color="#666666" alpha="1.0" textAlign="center" width="22.5" height="18"/>
	<mx:Label text="Height" x="93.5" y="12" color="#000000"/>
	<mx:TextInput width="50" id="boxHeight" x="93.5" y="28" borderStyle="solid" cornerRadius="5" borderThickness="0" backgroundColor="#FFFFFF" styleName="champ"/>
	<mx:CheckBox x="151" y="71" id="boxRelative" selected="true"/>
	
	<mx:Label text="X" x="14" y="52" color="#000000"/>
	<mx:TextInput width="50" id="boxXPos" x="14" y="68" borderStyle="solid" cornerRadius="5" borderThickness="0" styleName="champ"/>
	<mx:Label text="Y" x="92.5" y="52" color="#000000"/>
	<mx:TextInput width="50" id="boxYPos" x="93.5" y="68" borderStyle="solid" cornerRadius="5" borderThickness="0" styleName="champ"/>
	
	<mx:Label text="Border radius" x="14" y="93.5" color="#000000"/>
	<mx:NumericStepper x="34" y="113" width="41.5" id="boxLTCorner" minimum="0" maximum="100" stepSize="0.5" value="0"/>
	<mx:NumericStepper x="102" y="114" width="41.5" id="boxRTCorner" minimum="0" maximum="100" stepSize="0.5" value="0"/>
	<mx:NumericStepper x="34" y="143" width="41.5" id="boxLBCorner" minimum="0" maximum="100" stepSize="0.5" value="0"/>
	<mx:NumericStepper x="102" y="143" width="41.5" id="boxRBCorner" minimum="0" maximum="100" stepSize="0.5" value="0"/>
	<mx:CheckBox x="151" y="129" id="boxLockCorners"/>
	
	<mx:Label text="Color" x="14" y="168" color="#000000"/>
	<mx:ColorPicker x="14" y="188" width="130" height="34" id="boxColor" selectedColor="#000000"/>
	
	<mx:Label text="Opacity" x="14" y="230" color="#000000"/>
	<mx:Label text="%" x="148" y="230" color="#888888" textAlign="left" width="26.5" id="txtOpacity"/>
	<mx:NumericStepper width="50" id="boxIOpacity" x="93.5" y="228" alpha="1.0" enabled="true" stepSize="1" maximum="100" minimum="0" value="100"/>
	<mx:HSlider x="14" y="250" width="130" minimum="0" maximum="100" snapInterval="1" id="boxOpacity" liveDragging="true"/>
	
	<mx:Button y="287" label="Create box" height="22" id="BtnCreateBox" enabled="false" width="129.5" x="15.75" themeColor="#000000"/>
	
	
	<mx:Image x="169" y="134" height="33" width="30" scaleContent="false" autoLoad="true" id="imgLock"/>
	<mx:Image x="169" y="74" height="33" width="30" scaleContent="false" autoLoad="true" id="imgRelative"/>
	<mx:Image x="16" y="118" height="33" width="34" scaleContent="false" autoLoad="true" id="imgLT"/>
	<mx:Image x="16" y="148" height="33" width="34" scaleContent="false" autoLoad="true" id="imgLB"/>
	<mx:Image x="83" y="148" height="33" width="34" scaleContent="false" autoLoad="true" id="imgRB"/>
	<mx:Image x="83" y="119" height="33" width="34" scaleContent="false" autoLoad="true" id="imgRT"/>
	<mx:Style source="Boxes.css"/>
</mx:Application>